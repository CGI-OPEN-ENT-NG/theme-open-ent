plugins {
  id 'java'
  id 'scala'
  id 'maven'
  id 'maven-publish'
}

group = "${modowner}"
version = "$version"

publishing {
    publications {
        maven(MavenPublication) {
            groupId "${modowner}"
            artifactId "$System.env.OVERRIDE_MODNAME"
            version "$version"
            artifact("build/libs/${modowner}~${System.env.OVERRIDE_MODNAME}~$version-fat.jar") { classifier "fat" }
        }
        maven(MavenPublication) {
            groupId "${modowner}"
            artifactId "${System.env.OVERRIDE_MODNAME}"
            version "$version"
            artifact("build/libs/${modowner}~${System.env.OVERRIDE_MODNAME}~$version-deployment.jar") { classifier "deployment" }
        }
    }
    repositories {
        if (version.endsWith("SNAPSHOT")) {
            maven {
            name 'Snapshots'
                url 'https://maven.opendigitaleducation.com/nexus/content/repositories/snapshots/'
                credentials {
                username "${odeUsername}"
                    password "${odePassword}"
                }
            }
        } else {
            maven {
            name 'Releases'
                url 'https://maven.opendigitaleducation.com/nexus/content/repositories/releases/'
                credentials {
                username "${odeUsername}"
                    password "${odePassword}"
                }
            }
        }
    }
}

//begin generateTemplate
task generateDeployment(type: Copy)  {
    from 'conf.deployment'
    filter { line -> line.replaceAll('%VERSION%', "${version}") }
    filter { line -> line.replaceAll('%MODNAME%', "${System.env.OVERRIDE_MODNAME}") }
    rename 'conf.deployment', "conf.json.template"
    into "deployment/${System.env.OVERRIDE_MODNAME}/"
}
task generateTemplate(type: Copy,dependsOn: 'generateDeployment') {
  Map<String,String> extra = new HashMap(project.properties);
  String npmTag = System.env.FRONT_TAG?.trim()? System.env.FRONT_TAG : System.env.BRANCH_NAME;
  String npmToken = "${System.env.NEXUS_ODE_USERNAME}:${System.env.NEXUS_ODE_PASSWORD}"
  extra.put('npmToken', npmToken.bytes.encodeBase64().toString());
  extra.put('DIST_DIR', '$DIST_DIR');
  extra.put('SKIN_DIR', '$SKIN_DIR');
  extra.put('OVERRIDE_SRC', '$OVERRIDE_SRC');
  extra.put('OVERRIDE_DIST', '$OVERRIDE_DIST');
  extra.keySet().each{
      if(extra[it]!=null && extra[it] instanceof String){
        extra[it] = extra[it].replace("%generateVersion%",new Date().format( 'yyyyMMddHHmm' ))
        extra[it] = extra[it].replace("%npmTag%",npmTag!=null? npmTag : "")
      }
  }
  from(project.projectDir.toString()) {
      include '*.template'
      expand(extra)
  }
  into project.projectDir.toString()
  rename { String fileName ->
      fileName.replace(".template", "")
  }
}
task generateTemplateDev(type: Copy,dependsOn: 'generateDeployment') {
  Map<String,String> extra = new HashMap(project.properties);
  String npmTag = System.env.FRONT_TAG?.trim()? System.env.FRONT_TAG : System.env.BRANCH_NAME;
  String npmToken = "${System.env.NEXUS_ODE_USERNAME}:${System.env.NEXUS_ODE_PASSWORD}"
  extra.put('npmToken', npmToken.bytes.encodeBase64().toString());
  extra.put('DIST_DIR', '$DIST_DIR');
  extra.put('SKIN_DIR', '$SKIN_DIR');
  extra.put('OVERRIDE_SRC', '$OVERRIDE_SRC');
  extra.put('OVERRIDE_DIST', '$OVERRIDE_DIST');
  extra.keySet().each{
      if(extra[it]!=null && extra[it] instanceof String){
        extra[it] = extra[it].replace("%generateVersion%",new Date().format( 'yyyyMMddHHmm' ))
        extra[it] = extra[it].replace("%npmTag%", "file:/home/node/entcore-css-lib")
      }
  }
  from(project.projectDir.toString()) {
      include '*.template'
      expand(extra)
  }
  into project.projectDir.toString()
  rename { String fileName ->
      fileName.replace(".template", "")
  }
}
//end generateTemplate


task deploymentJar(type: Jar) {
    classifier = 'deployment'
    archiveName = "${modowner}~${System.env.OVERRIDE_MODNAME}~$version-$classifier.$extension"
    from "deployment/"
}

task fatJar(type: Jar) {
    classifier = 'fat'
    archiveName = "${modowner}~${System.env.OVERRIDE_MODNAME}~$version-$classifier.$extension"
    includes = ["dist/**","conf.j2","${System.env.OVERRIDE_MODNAME}/**","${modname}/**"]
    from "."
}


artifacts {
  archives fatJar
  archives deploymentJar
}